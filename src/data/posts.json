[
  {
    "id": 6,
    "featured": false,
    "title": "Avoid This Nuisance When Deploying a React Router Project to GitHub Pages",
    "date": "07/16/2024",
    "type": "Discussion",
    "tags": ["React Router", "GitHub", "Deployment"],
    "imageIsLogo": false,
    "body": "<p>Deployment, the dreaded forced switching of environments, can be unnerving. One moment, everything is humming along in your local dev space. The next, you type the deploy command, and everything breaks &#128553;</p><p>In my project (this website actually), I was using Vite and React Router while attempting to deploy to GitHub Pages. Initially, all I got was a blank page at the root (hello Problem 1). After resolving this, all of my routes then led to a 404 whenever they were either refreshed or used as an entry point of the site (enter Problem 2).</p><h4>Problem 1</h4><p>I solved Problem 1 by properly setting and handling my project's basename in the router object. This defaults to &#8220;/&#8221; and needs to be set to your repository name (in my case, &#8220;/webdevblog/&#8221;) on GitHub Pages. Hardcoding this made my production site work, but broke my local development version. In order to get both working, I had to use environment variables in the root folder (filename &#8220;.env&#8221;) with the following:</p><p class=\"quote bold\">VITE_BASE_URL=/</p><p>and the production variable (filename: &#8220;.env.production&#8221;):</p><p class=\"quote bold\">VITE_BASE_URL=/yourBaseName/</p><p>Then, I was able to import these as needed using</p><p class=\"quote bold\">import.meta.env.VITE_BASE_URL</p><p>in my router object and elsewhere (like in image paths). I did encounter more trouble importing these variables in vite.config.js but solved this by using loadEnv (more on this in the <a href=\"https://vitejs.dev/config/#using-environment-variables-in-config\" target=\"_new\">Vite docs</a>).</p><p>Hilariously, once I switched GitHub Pages over to a custom domain (stevencoy.com), everything I just described was no longer an issue as the basename was back to the default &#8220;/&#8221;! So, if you plan to use a custom domain, just skip all of this hassle and try deploying with your custom domain and the default basename from the start. (Make sure to put a CNAME file in your public folder.)</p><h4>Problem 2</h4><p>Problem 2 was a bit of a different story. By default, GitHub Pages looks for an index.html file. Some parts of my site, namely the individual post pages (found at path &#8220;/basename/posts/slug&#8221;), were handled by React Router, so there was no index.html to be found at those paths. I could get to them from my homepage without fail, but if the individual posts themselves were either refreshed or used as the entry point, GitHub Pages would 404 me hard... because it could not find an index.html file there.</p><p>My (somewhat band-aided) solution was to create a custom 404.html (placed in the public folder) with the following logic:</p><ol><li>Get the current URL (the post path that failed).</li><li>Parse out the substring after the last slash in the URL and set this as a &#8220;possible slug&#8221;.</li><li>Redirect to the home route (which does have an index.html so GitHub Pages won't get angry), with the possible slug as a search parameter in the URL.</li><li>In the Root/App component, navigate to the proper page if there is a search parameter that matches an existing slug.</li></ol><p>For step #4, I used the <a href=\"https://reactrouter.com/en/main/hooks/use-navigate\" target=\"_new\">useNavigate</a> and <a href=\"https://reactrouter.com/en/main/hooks/use-search-params#usesearchparams\" target=\"_new\">useSearchParams</a> hooks from react-router-dom. The code and process for solving problem 2 is further detailed <a href=\"https://stackoverflow.com/questions/62047422/404-when-trying-to-enter-a-react-app-route/78744541#78744541\" target=\"_new\">on StackOverflow</a> or in my website <a href=\"https://github.com/ragmats/webdevblog/blob/f6d297e6bae50ea996db12633e8f32d3ace16a05/src/routes/Root.jsx#L87\" target=\"_new\">repo</a>.</p>",
    "slug": "avoid-this-nuisance-when-deploying-a-react-router-project-to-github-pages"
  },
  {
    "id": 5,
    "featured": false,
    "title": "Hello World to My New React Web Dev Portfolio Blog Website Thing!",
    "date": "07/14/2024",
    "type": "Website",
    "tags": ["React", "JavaScript", "HTML", "CSS"],
    "imageIsLogo": false,
    "body": "<p>Given that most of my projects these days are in React, it made sense to rebuild my previous portfolio site (which used Jeckyll) from scratch in React to serve as an ongoing sandbox for me to experiment and build upon.</p><p>In addition to featuring my main projects, I plan to keep my development skills sharp with smaller, experimental projects and discussions. Some of these may become features on this site if they make sense to add, while others will be purely for fun and learning.</p><h4>Planned Upcoming Features:</h4><ul><li><b>Sharable Filtered Pages:</b> Enable filters to work with search parameters, allowing filtered pages to be shared.</li><li><b>Light/Dark Mode:</b> Implement a toggle for light and dark modes.</li><li><b>Enhanced Styling:</b> Add icons to improve the siteâ€™s design.</li><li><b>Collapsible Action Button:</b> Introduce a collapsible action button with filtering options.</li><li><b>Loading and Pagination:</b> Implement loading and paginated posts if needed.</li></ul><p>Stay tuned for more updates as I continue to develop and improve this site.</p>",
    "slug": "hello-world-to-my-new-react-web-dev-portfolio-blog-website-thing"
  },
  {
    "id": 4,
    "featured": true,
    "title": "HISSINGBELL Developer Website",
    "date": "10/06/2023",
    "type": "Project",
    "tags": ["Next.js", "React", "JavaScript", "HTML", "CSS"],
    "imageLight": "hissingbell_light.png",
    "imageDark": "hissingbell_dark.png",
    "imageIsLogo": true,
    "body": "<h4><a href=\"https://hissingbell.studio/\" target=\"_new\">Live project</a></h4><p>I created the developer website for the client HISSINGBELL, a San Diego, California based VR game studio.</p><h4>Features Include:</h4><ul><li>Ongoing client/developer collaboration involving virtual meetings, design mock-ups, and Git workflow.</li><li>Static site developed using <a href=\"https://nextjs.org/\" target=\"_new\">Next.js</a>.</li><li>Layered SVG parallax effects using <a href=\"https://react-scroll-parallax.damnthat.tv/docs/intro\" target=\"_new\">React Scroll Parallax</a>.</li><li>Image carousel using <a href=\"https://react-multi-carousel.vercel.app/\" target=\"_new\">React-multi-carousel</a></li><li>Site-wide light/dark mode saved to Local Storage.</li></ul><p>HISSINGBELL was Deployed on <a href=\"https://docs.digitalocean.com/developer-center/deploying-a-next.js-application-on-a-digitalocean-droplet/\" target=\"_new\">DigitalOcean</a>.</p>",
    "slug": "hissingbell-developer-website"
  },
  {
    "id": 3,
    "featured": true,
    "title": "SIRME, a React Simon Game",
    "date": "03/27/2023",
    "type": "Project",
    "tags": ["React", "JavaScript", "HTML", "CSS"],
    "imageLight": "sirme-logo.svg",
    "imageDark": "sirme-logo.svg",
    "imageIsLogo": true,
    "body": "<h4><a href=\"https://sirme.ragmats.com/\" target=\"_new\">Live project</a> | <a href=\"https://github.com/ragmats/sirme\" target=\"_new\">GitHub Repo</a></h4><p>SIRME is a Simon game created in React. High scores are stored in local storage, so players can enjoy persistent competition with friends on the same device.</p><p>In this project, I learned how to manage state, execute actions in a timed sequence, and properly set and get data in local storage.<h4>Features Include:</h4><ul><li>Persistent local player names and scoreboard.</li><li>Keyboard shortcuts (arrow keys and WASD).</li><li>Simultaneous sound effects using the Web Audio API.</li><li>Difficulty modes (slow, medium, fast).</li><li>A repeat button to replay the most recent sequence at the cost of a score point.</li><li>Intuitive stat tracking, including current round, score, and overall rank.</li><li>An info modal with multiple ways to escape (including escape key) for a better user experience.</li><li>Responsive UI for desktop and mobile.</li><li>Light/dark modes.</li></ul>",
    "slug": "sirme-a-react-simon-game"
  },
  {
    "id": 2,
    "featured": true,
    "title": "GridSquid, an Educational Custom Grid Creator",
    "date": "11/9/2022",
    "type": "Project",
    "tags": ["Python", "Django", "JavaScript", "HTML", "CSS"],
    "imageLight": "gs_logo_long.svg",
    "imageDark": "gs_logo_long.svg",
    "imageIsLogo": true,
    "body": "<h4><a href=\"https://gridsquid.ragmats.com/\" target=\"_new\">Live project</a> | <a href=\"https://github.com/ragmats/gridsquid\" target=\"_new\">GitHub Repo</a></h4><p>GridSquid is an educational single-page web app coded in JavaScript and Python/Django that lets users make custom grids of images, sounds, and captions. Originally, the idea was to help toddler-aged kids learn the faces and names of all their relatives, but it developed into a much broader application that is useful in homeschool, language studies, and other general education.</p><p>I learned so much from this project, namely how to set up a CRUD-capable backend with user authentication, custom APIs, and integration of open-source libraries, as well as a good understanding of core JavaScript concepts like promises, async/await, destructuring, the spread operator, array methods, and the Fetch API (to name a few). I also became more familiar with Git and the deployment process.</p><h4>Features Include:</h4><ul><li>A front-end written in JavaScript, HTML, and responsive CSS (<a href=\"https://getbootstrap.com/docs/5.0/getting-started/introduction/\" target=\"_new\">Bootstrap 5</a> in part, the rest hand-coded).</li><li>Implementation as a single-page application (SPA) with history states for better user navigation.</li><li>A fully CRUD-capable backend written in <a href=\"https://www.djangoproject.com/\" target=\"_new\">Django</a>/Python with many custom APIs.</li><li>User authentication and password resets via email.</li><li>Guest accounts (w/ same user access) that get deleted every 30 days, checked daily via automated task and custom command.</li><li>User accounts for creating and storing sets of custom grids with uploaded images, audio, and/or text captions.</li><li>Cropping functionality for user-submitted images using the <a href=\"https://fengyuanchen.github.io/cropperjs/\" target=\"_new\">Cropper.js</a> library.</li><li>Backend image compression using <a href=\"https://python-pillow.org/\" target=\"_new\">Pillow</a>.</li><li>User-uploaded audio files converted to mp3 using <a href=\"http://pydub.com/\" target=\"_new\">Pydub</a>.</li><li>File/mime type validation of image and audio files via <a href=\"https://github.com/ahupp/python-magic\"target=\"_new\">Python Magic</a>.</li><li>The option to record and save audio using <a href=\"https://github.com/closeio/mic-recorder-to-mp3\" target=\"_new\">Microphone Recorder to Mp3</a>.</li><li>A memory game that can be played on any grid complete with sound effects and CSS &#8220;card flip&#8221; animations.</li><li>Auto-generated quizzes for any grid with that has audio or text (or both).</li><li>A collection page called &#8220;MyGrids&#8221; where user grids can be organized into albums.</li></ul><p>GridSquid was deployed on <a href=\"https://pythonanywhere.com/\" target=\"_new\">PythonAnywhere</a>.</p><iframe src=\"https://www.youtube.com/embed/qhYY0cqv-ig\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay;clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>",
    "slug": "gridsquid-an-educational-custom-grid-creator"
  },
  {
    "id": 1,
    "featured": true,
    "title": "Oopsie, an Anti-Fertility Calculator",
    "date": "11/15/2021",
    "type": "Project",
    "tags": ["Python", "Flask", "JavaScript", "HTML", "CSS"],
    "imageLight": "oopsie_logo.svg",
    "imageDark": "oopsie_logo.svg",
    "imageIsLogo": true,
    "body": "<h4><a href=\"https://oopsie.ragmats.com\" target=\"_new\">Live project</a> | <a href=\"https://github.com/ragmats/oopsie\" target=\"_new\">GitHub Repo</a></h4><p>Oopsie is a web-based anti-fertility application that celebrates the wonderful, life-altering event of not getting pregnant. I made this tool because I love my kids and two are enough for me &#128522;</p><p>This project was built with Flask/Python and JavaScript. I learned how to set up a backend and render templates with calculations based on user input and data from a database. I also learned how to work with classes for cleaner code, Python's datetime module, time zone localization, and persistent user sessions.</p><h4>Features Include:</h4><ul><li>A main page that gives the user their &#8220;oopsie&#8221; chance as a percentage based on method inputs and researched data.</li><li>Responsive design using CSS media queries.</li><li>Algorithms that determine an oopsie chance based on date, time, and user inputs.</li><li>A &#8220;permanent&#8221; session for a persistent user experience.</li><li>Time zone localization.</li><li>A calendar view that displays the current, last, and next week of oopsie chances.</li><li>A JavaScript simulation/mini-game.</li></ul><p>Oopsie was deployed on <a href=\"https://pythonanywhere.com/\" target=\"_new\">PythonAnywhere</a> (previously Heroku).</p><iframe src=\"https://www.youtube.com/embed/flOwjttW78A\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>",
    "slug": "oopsie-an-anti-fertility-calculator"
  }
]
